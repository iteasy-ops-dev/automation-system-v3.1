#!/bin/bash

# Storage Service 완전한 시작 스크립트
# TASK-4-PRISMA 영구 해결책

set -e

echo "🚀 Storage Service 시작 중..."
echo "📅 $(date)"

# 환경변수 확인
echo "🔍 환경변수 확인:"
echo "  - POSTGRES_HOST: ${POSTGRES_HOST:-postgres}"
echo "  - POSTGRES_PORT: ${POSTGRES_PORT:-5432}"
echo "  - POSTGRES_DB: ${POSTGRES_DB:-automation}"
echo "  - POSTGRES_USER: ${POSTGRES_USER:-postgres}"

# PostgreSQL 연결 대기 (최대 60초)
echo "📡 PostgreSQL 연결 대기 중..."
TIMEOUT=60
ELAPSED=0

while ! pg_isready -h ${POSTGRES_HOST:-postgres} -p ${POSTGRES_PORT:-5432} -U ${POSTGRES_USER:-postgres} >/dev/null 2>&1; do
  if [ $ELAPSED -ge $TIMEOUT ]; then
    echo "❌ PostgreSQL 연결 실패: ${TIMEOUT}초 초과"
    exit 1
  fi
  echo "⏳ PostgreSQL 연결 대기 중... (${ELAPSED}/${TIMEOUT}초)"
  sleep 5
  ELAPSED=$((ELAPSED + 5))
done

echo "✅ PostgreSQL 연결 확인 (${ELAPSED}초 소요)"

# 데이터베이스 존재 여부 확인
echo "🔍 데이터베이스 존재 여부 확인..."
DB_EXISTS=$(PGPASSWORD=${POSTGRES_PASSWORD:-password} psql \
  -h ${POSTGRES_HOST:-postgres} \
  -p ${POSTGRES_PORT:-5432} \
  -U ${POSTGRES_USER:-postgres} \
  -lqt | cut -d \| -f 1 | grep -w ${POSTGRES_DB:-automation} | wc -l)

if [ "$DB_EXISTS" -eq "0" ]; then
  echo "❌ 데이터베이스 '${POSTGRES_DB:-automation}'가 존재하지 않습니다"
  exit 1
fi

echo "✅ 데이터베이스 '${POSTGRES_DB:-automation}' 확인"

# MCP 테이블 존재 여부 확인
echo "🔍 MCP 테이블 존재 여부 확인..."
MCP_TABLE_EXISTS=$(PGPASSWORD=${POSTGRES_PASSWORD:-password} psql \
  -h ${POSTGRES_HOST:-postgres} \
  -p ${POSTGRES_PORT:-5432} \
  -U ${POSTGRES_USER:-postgres} \
  -d ${POSTGRES_DB:-automation} \
  -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'mcp_servers');" \
  -t | tr -d ' \n')

if [ "$MCP_TABLE_EXISTS" = "f" ]; then
  echo "❌ mcp_servers 테이블이 존재하지 않습니다"
  exit 1
fi

echo "✅ mcp_servers 테이블 확인"

# MCP 필수 컬럼 확인 및 추가
echo "🔄 MCP 테이블 스키마 업데이트 중..."

PGPASSWORD=${POSTGRES_PASSWORD:-password} psql \
  -h ${POSTGRES_HOST:-postgres} \
  -p ${POSTGRES_PORT:-5432} \
  -U ${POSTGRES_USER:-postgres} \
  -d ${POSTGRES_DB:-automation} \
  -c "
-- MCP Protocol 표준 컬럼들 추가 (안전하게)
DO \$\$
BEGIN
  -- connection_status 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN connection_status VARCHAR(20) DEFAULT 'disconnected';
    RAISE NOTICE 'connection_status 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'connection_status 컬럼 이미 존재함';
  END;

  -- transport 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN transport VARCHAR(20) DEFAULT 'stdio';
    RAISE NOTICE 'transport 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'transport 컬럼 이미 존재함';
  END;

  -- command 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN command VARCHAR(500);
    RAISE NOTICE 'command 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'command 컬럼 이미 존재함';
  END;

  -- args 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN args TEXT[] DEFAULT '{}';
    RAISE NOTICE 'args 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'args 컬럼 이미 존재함';
  END;

  -- ssh_config 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN ssh_config JSONB;
    RAISE NOTICE 'ssh_config 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'ssh_config 컬럼 이미 존재함';
  END;

  -- docker_config 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN docker_config JSONB;
    RAISE NOTICE 'docker_config 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'docker_config 컬럼 이미 존재함';
  END;

  -- http_config 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN http_config JSONB;
    RAISE NOTICE 'http_config 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'http_config 컬럼 이미 존재함';
  END;

  -- server_info 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN server_info JSONB;
    RAISE NOTICE 'server_info 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'server_info 컬럼 이미 존재함';
  END;

  -- last_error 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN last_error TEXT;
    RAISE NOTICE 'last_error 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'last_error 컬럼 이미 존재함';
  END;

  -- metadata 컬럼 추가
  BEGIN
    ALTER TABLE mcp_servers ADD COLUMN metadata JSONB DEFAULT '{}';
    RAISE NOTICE 'metadata 컬럼 추가됨';
  EXCEPTION
    WHEN duplicate_column THEN
      RAISE NOTICE 'metadata 컬럼 이미 존재함';
  END;

  -- NOT NULL 제약 조건 제거
  BEGIN
    ALTER TABLE mcp_servers ALTER COLUMN endpoint_url DROP NOT NULL;
    RAISE NOTICE 'endpoint_url NOT NULL 제약 조건 제거됨';
  EXCEPTION
    WHEN others THEN
      RAISE NOTICE 'endpoint_url NOT NULL 제약 조건 제거 스킵됨';
  END;

  BEGIN
    ALTER TABLE mcp_servers ALTER COLUMN server_type DROP NOT NULL;
    RAISE NOTICE 'server_type NOT NULL 제약 조건 제거됨';
  EXCEPTION
    WHEN others THEN
      RAISE NOTICE 'server_type NOT NULL 제약 조건 제거 스킵됨';
  END;

END
\$\$;

-- 인덱스 추가
CREATE INDEX IF NOT EXISTS idx_mcp_servers_transport ON mcp_servers(transport);
CREATE INDEX IF NOT EXISTS idx_mcp_servers_connection_status ON mcp_servers(connection_status);

-- 제약 조건 추가 (안전하게)
DO \$\$
BEGIN
  BEGIN
    ALTER TABLE mcp_servers ADD CONSTRAINT mcp_servers_connection_status_check 
      CHECK (connection_status::text = ANY (ARRAY['connected'::character varying, 'disconnected'::character varying, 'connecting'::character varying, 'error'::character varying]::text[]));
    RAISE NOTICE 'connection_status 체크 제약 조건 추가됨';
  EXCEPTION
    WHEN duplicate_object THEN
      RAISE NOTICE 'connection_status 체크 제약 조건 이미 존재함';
  END;

  BEGIN
    ALTER TABLE mcp_servers ADD CONSTRAINT mcp_servers_transport_check 
      CHECK (transport::text = ANY (ARRAY['stdio'::character varying, 'ssh'::character varying, 'docker'::character varying, 'http'::character varying]::text[]));
    RAISE NOTICE 'transport 체크 제약 조건 추가됨';
  EXCEPTION
    WHEN duplicate_object THEN
      RAISE NOTICE 'transport 체크 제약 조건 이미 존재함';
  END;
END
\$\$;
" 2>&1 | while IFS= read -r line; do
  echo "  📝 $line"
done

echo "✅ MCP 스키마 업데이트 완료"

# Prisma Client 재생성
echo "🔄 Prisma Client 재생성 중..."
npx prisma generate

echo "✅ Prisma Client 재생성 완료"

# 최종 스키마 검증
echo "🔍 최종 스키마 검증 중..."
REQUIRED_COLUMNS=("connection_status" "transport" "command" "args" "ssh_config" "docker_config" "http_config" "server_info" "last_error" "metadata")

for column in "${REQUIRED_COLUMNS[@]}"; do
  COLUMN_EXISTS=$(PGPASSWORD=${POSTGRES_PASSWORD:-password} psql \
    -h ${POSTGRES_HOST:-postgres} \
    -p ${POSTGRES_PORT:-5432} \
    -U ${POSTGRES_USER:-postgres} \
    -d ${POSTGRES_DB:-automation} \
    -c "SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_name='mcp_servers' AND column_name='$column');" \
    -t | tr -d ' \n')
  
  if [ "$COLUMN_EXISTS" = "t" ]; then
    echo "  ✅ $column 컬럼 확인"
  else
    echo "  ❌ $column 컬럼 누락"
    exit 1
  fi
done

echo "✅ 모든 필수 컬럼 확인 완료"

# Storage Service 시작
echo "🚀 Storage Service 애플리케이션 시작..."
echo "📅 $(date)"

exec npm start