#!/bin/bash

# ========================================
# ÏôÑÎ≤ΩÌïú Î∞±ÏóÖ Ïä§ÌÅ¨Î¶ΩÌä∏ v2.0
# Prisma Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Ìè¨Ìï®
# ========================================

set -e

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ìï®Ïàò: Î°úÍ∑∏ Ï∂úÎ†•
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Î∞±ÏóÖ ÏÑ§Ï†ï
PROJECT_DIR="/Users/leesg/Documents/work_ops/automation-system"
BACKUP_ID="$(date +%Y%m%d_%H%M%S)"
BACKUP_DIR="$PROJECT_DIR/backups/$BACKUP_ID"

echo ""
echo "========================================="
echo "   ÏôÑÎ≤ΩÌïú Î∞±ÏóÖ ÏÉùÏÑ± v2.0"
echo "========================================="
echo "Î∞±ÏóÖ ID: $BACKUP_ID"
echo "Î∞±ÏóÖ ÏúÑÏπò: $BACKUP_DIR"
echo "========================================="
echo ""

# 1. Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
log_info "Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±..."
mkdir -p "$BACKUP_DIR"/{images,data,schema,scripts}
log_success "ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÏôÑÎ£å"
echo ""

# 2. Docker Ïù¥ÎØ∏ÏßÄ Î∞±ÏóÖ
log_info "Docker Ïù¥ÎØ∏ÏßÄ Î∞±ÏóÖ..."
cd "$BACKUP_DIR/images"

declare -a services=("gateway" "storage" "device-service" "mcp-service" "llm-service" "workflow-engine" "main-app")

for service in "${services[@]}"; do
    if docker images | grep -q "automation-system/$service"; then
        echo "  ‚Üí $service Î∞±ÏóÖ Ï§ë..."
        docker save "automation-system/$service:latest" -o "$service-$BACKUP_ID.tar"
    fi
done

log_success "Docker Ïù¥ÎØ∏ÏßÄ Î∞±ÏóÖ ÏôÑÎ£å"
echo ""

# 3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ
log_info "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ..."
cd "$BACKUP_DIR/data"

# PostgreSQL Ï†ÑÏ≤¥ Î∞±ÏóÖ
echo "  ‚Üí PostgreSQL Î∞±ÏóÖ..."
docker exec automation-postgres pg_dump -U postgres automation > "postgres-full-$BACKUP_ID.sql"

# MongoDB Î∞±ÏóÖ
echo "  ‚Üí MongoDB Î∞±ÏóÖ..."
docker exec automation-mongodb mongodump --archive --db=automation \
    --username=admin --password=automation_mongo_pass_2024 \
    --authenticationDatabase=admin > "mongodb-$BACKUP_ID.archive"

# Redis Î∞±ÏóÖ (ÏÑ†ÌÉùÏ†Å)
echo "  ‚Üí Redis Î∞±ÏóÖ..."
docker exec automation-redis redis-cli -a automation_redis_pass_2024 --rdb /tmp/redis-backup.rdb
docker cp automation-redis:/tmp/redis-backup.rdb "./redis-$BACKUP_ID.rdb"

log_success "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ ÏôÑÎ£å"
echo ""

# 4. Prisma Ïä§ÌÇ§Îßà Î∞±ÏóÖ (Ï§ëÏöî!)
log_info "Prisma Ïä§ÌÇ§Îßà Î∞±ÏóÖ..."
cd "$BACKUP_DIR/schema"

# Storage Service Prisma Ïä§ÌÇ§Îßà
if [ -f "$PROJECT_DIR/services/storage/prisma/schema.prisma" ]; then
    cp "$PROJECT_DIR/services/storage/prisma/schema.prisma" "storage-schema.prisma"
fi

# Îã§Î•∏ ÏÑúÎπÑÏä§Îì§Ïùò Prisma Ïä§ÌÇ§Îßà (ÏûàÎäî Í≤ΩÏö∞)
for service in device-service mcp-service llm-service workflow-engine; do
    if [ -f "$PROJECT_DIR/services/domain/${service//-service/}/prisma/schema.prisma" ]; then
        cp "$PROJECT_DIR/services/domain/${service//-service/}/prisma/schema.prisma" "$service-schema.prisma"
    fi
done

# ÌòÑÏû¨ DB Ïä§ÌÇ§Îßà Îç§ÌîÑ
echo "  ‚Üí ÌòÑÏû¨ DB Ïä§ÌÇ§Îßà Îç§ÌîÑ..."
docker exec automation-postgres pg_dump -U postgres -d automation --schema-only > "db-schema-$BACKUP_ID.sql"

log_success "Ïä§ÌÇ§Îßà Î∞±ÏóÖ ÏôÑÎ£å"
echo ""

# 5. Ïä§ÎßàÌä∏ Î≥µÏõê Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
log_info "Î≥µÏõê Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±..."
cat > "$BACKUP_DIR/smart-restore.sh" << 'RESTORE_EOF'
#!/bin/bash

# ÏûêÎèô ÏÉùÏÑ±Îêú Ïä§ÎßàÌä∏ Î≥µÏõê Ïä§ÌÅ¨Î¶ΩÌä∏
set -e

BACKUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="/Users/leesg/Documents/work_ops/automation-system"
BACKUP_ID="BACKUP_ID_PLACEHOLDER"

echo "=== üîÑ Ïä§ÎßàÌä∏ Î≥µÏõê ÏãúÏûë ==="
echo "Î∞±ÏóÖ ID: $BACKUP_ID"
echo "Î∞±ÏóÖ ÏúÑÏπò: $BACKUP_DIR"
echo ""

# 1. ÏãúÏä§ÌÖú Ï§ëÏßÄ
echo "1Ô∏è‚É£ ÏãúÏä§ÌÖú Ï§ëÏßÄ..."
cd "$PROJECT_DIR"
docker-compose down
echo "‚úÖ ÏôÑÎ£å"

# 2. Docker Ïù¥ÎØ∏ÏßÄ Î≥µÏõê
echo "2Ô∏è‚É£ Docker Ïù¥ÎØ∏ÏßÄ Î≥µÏõê..."
cd "$BACKUP_DIR/images"
for tar_file in *.tar; do
    [ -f "$tar_file" ] && docker load -i "$tar_file"
done
echo "‚úÖ ÏôÑÎ£å"

# 3. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑúÎπÑÏä§ ÏãúÏûë
echo "3Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏãúÏûë..."
cd "$PROJECT_DIR"
docker-compose up -d postgres mongodb redis minio influxdb
sleep 15
echo "‚úÖ ÏôÑÎ£å"

# 4. PostgreSQL Ï§ÄÎπÑ
echo "4Ô∏è‚É£ PostgreSQL Ï§ÄÎπÑ..."
docker exec automation-postgres psql -U postgres -c "DROP DATABASE IF EXISTS automation" 2>/dev/null || true
docker exec automation-postgres psql -U postgres -c "CREATE DATABASE automation"
docker exec automation-postgres psql -U postgres -d automation -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"; CREATE EXTENSION IF NOT EXISTS citext; CREATE EXTENSION IF NOT EXISTS btree_gin;"
echo "‚úÖ ÏôÑÎ£å"

# 5. Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
echo "5Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê..."
cat "$BACKUP_DIR/data/postgres-full-"*.sql | docker exec -i automation-postgres psql -U postgres -d automation
docker exec -i automation-mongodb mongorestore --archive --db=automation --username=admin --password=automation_mongo_pass_2024 --authenticationDatabase=admin --drop < "$BACKUP_DIR/data/mongodb-"*.archive
echo "‚úÖ ÏôÑÎ£å"

# 6. Ïä§ÌÇ§Îßà ÎèôÍ∏∞Ìôî
echo "6Ô∏è‚É£ Prisma Ïä§ÌÇ§Îßà ÎèôÍ∏∞Ìôî..."
docker exec automation-postgres psql -U postgres -d automation << 'EOF'
-- devices ÌÖåÏù¥Î∏î
ALTER TABLE devices ADD COLUMN IF NOT EXISTS connection_info jsonb DEFAULT '{}'::jsonb;

-- mcp_servers ÌÖåÏù¥Î∏î
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS transport VARCHAR(20) DEFAULT 'stdio';
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS connection_status VARCHAR(20) DEFAULT 'disconnected';
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS command VARCHAR(500);
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS args TEXT[] DEFAULT ARRAY[]::TEXT[];
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS ssh_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS docker_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS http_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS server_info JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS last_error TEXT;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS environment JSONB DEFAULT '{}'::jsonb;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS last_connected_at TIMESTAMP(6);
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS error_message TEXT;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;
EOF
echo "‚úÖ ÏôÑÎ£å"

# 7. Î™®Îì† ÏÑúÎπÑÏä§ ÏãúÏûë
echo "7Ô∏è‚É£ Ï†ÑÏ≤¥ ÏÑúÎπÑÏä§ ÏãúÏûë..."
cd "$PROJECT_DIR"
docker-compose up -d
echo "‚úÖ ÏôÑÎ£å"

echo ""
echo "========================================="
echo "‚úÖ Î≥µÏõê ÏôÑÎ£å!"
echo "========================================="
echo "Frontend: http://localhost:3001"
echo "API: http://localhost:8080"
echo "Í≥ÑÏ†ï: admin / Admin123!@#"
echo "========================================="
RESTORE_EOF

# Î∞±ÏóÖ ID ÏπòÌôò
sed -i '' "s/BACKUP_ID_PLACEHOLDER/$BACKUP_ID/g" "$BACKUP_DIR/smart-restore.sh"
chmod +x "$BACKUP_DIR/smart-restore.sh"

log_success "Î≥µÏõê Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å"
echo ""

# 6. Î∞±ÏóÖ Ï†ïÎ≥¥ ÌååÏùº ÏÉùÏÑ±
log_info "Î∞±ÏóÖ Ï†ïÎ≥¥ ÏÉùÏÑ±..."
cat > "$BACKUP_DIR/backup-info.md" << EOF
# Î∞±ÏóÖ Ï†ïÎ≥¥

- **Î∞±ÏóÖ ID**: $BACKUP_ID
- **ÏÉùÏÑ± ÏãúÍ∞Ñ**: $(date)
- **ÏãúÏä§ÌÖú Î≤ÑÏ†Ñ**: v3.1
- **Î∞±ÏóÖ ÌÅ¨Í∏∞**: $(du -sh "$BACKUP_DIR" | cut -f1)

## Ìè¨Ìï® ÎÇ¥Ïö©
- Docker Ïù¥ÎØ∏ÏßÄ: $(ls -1 $BACKUP_DIR/images/*.tar 2>/dev/null | wc -l)Í∞ú
- PostgreSQL Îç∞Ïù¥ÌÑ∞: ‚úÖ
- MongoDB Îç∞Ïù¥ÌÑ∞: ‚úÖ
- Redis Îç∞Ïù¥ÌÑ∞: ‚úÖ
- Prisma Ïä§ÌÇ§Îßà: ‚úÖ

## Î≥µÏõê Î∞©Î≤ï
\`\`\`bash
cd $BACKUP_DIR
./smart-restore.sh
\`\`\`
EOF

# ÏµúÏã† Î∞±ÏóÖ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
cat > "$PROJECT_DIR/backups/latest-backup.txt" << EOF
ÏµúÏã† Î∞±ÏóÖ: $BACKUP_ID
ÏÉùÏÑ± ÏãúÍ∞Ñ: $(date)
ÌÅ¨Í∏∞: $(du -sh "$BACKUP_DIR" | cut -f1)
ÏúÑÏπò: $BACKUP_DIR
Î≥µÏõê: cd $BACKUP_DIR && ./smart-restore.sh
EOF

log_success "Î∞±ÏóÖ Ï†ïÎ≥¥ ÏÉùÏÑ± ÏôÑÎ£å"
echo ""

# 7. ÏôÑÎ£å
echo "========================================="
echo "   ‚úÖ Î∞±ÏóÖ ÏôÑÎ£å!"
echo "========================================="
echo ""
echo "üì¶ Î∞±ÏóÖ ID: $BACKUP_ID"
echo "üìç ÏúÑÏπò: $BACKUP_DIR"
echo "üìä ÌÅ¨Í∏∞: $(du -sh "$BACKUP_DIR" | cut -f1)"
echo ""
echo "Î≥µÏõê Î™ÖÎ†π:"
echo "  cd $BACKUP_DIR && ./smart-restore.sh"
echo ""
echo "========================================="

log_success "ÏôÑÎ≤ΩÌïú Î∞±ÏóÖÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! üéâ"
