#!/bin/bash

# ========================================
# 완벽한 복원 스크립트 v2.0
# Prisma 스키마와 DB 스키마 완전 동기화 포함
# ========================================

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 함수: 로그 출력
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# 백업 디렉토리 찾기
PROJECT_DIR="/Users/leesg/Documents/work_ops/automation-system"
BACKUP_DIR=""

# 최신 백업 찾기 (20250802_165334 우선)
if [ -d "$PROJECT_DIR/backups/20250802_165334" ]; then
    BACKUP_DIR="$PROJECT_DIR/backups/20250802_165334"
    log_info "검증된 백업 사용: 20250802_165334"
else
    # 가장 최근 백업 찾기
    BACKUP_DIR=$(ls -dt $PROJECT_DIR/backups/202* 2>/dev/null | head -1)
    if [ -z "$BACKUP_DIR" ]; then
        log_error "백업을 찾을 수 없습니다!"
        exit 1
    fi
    log_info "백업 사용: $(basename $BACKUP_DIR)"
fi

echo ""
echo "========================================="
echo "   완벽한 시스템 복원 v2.0"
echo "========================================="
echo "백업 위치: $BACKUP_DIR"
echo "프로젝트: $PROJECT_DIR"
echo "========================================="
echo ""

# 1. 시스템 완전 중지
log_info "1단계: 기존 시스템 완전 중지..."
cd "$PROJECT_DIR"
docker-compose down 2>/dev/null || true
log_success "시스템 중지 완료"
echo ""

# 2. Docker 이미지 복원
log_info "2단계: Docker 이미지 복원..."
cd "$BACKUP_DIR/images"
for image_file in *.tar; do
    if [ -f "$image_file" ]; then
        echo "  → $image_file 복원 중..."
        docker load -i "$image_file" > /dev/null 2>&1
    fi
done
log_success "Docker 이미지 복원 완료"
echo ""

# 3. 데이터베이스 서비스만 시작
log_info "3단계: 데이터베이스 서비스 시작..."
cd "$PROJECT_DIR"
docker-compose up -d postgres mongodb redis minio influxdb
sleep 15
log_success "데이터베이스 서비스 시작 완료"
echo ""

# 4. PostgreSQL 초기화 및 확장 설치
log_info "4단계: PostgreSQL 데이터베이스 준비..."

# 데이터베이스 재생성
docker exec automation-postgres psql -U postgres -c "DROP DATABASE IF EXISTS automation" 2>/dev/null || true
docker exec automation-postgres psql -U postgres -c "CREATE DATABASE automation"

# 필수 확장 설치 (Prisma가 reset해도 유지되도록)
docker exec automation-postgres psql -U postgres -d automation << 'EOF'
-- 필수 확장 설치
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS btree_gin;
EOF

log_success "PostgreSQL 준비 완료"
echo ""

# 5. 백업 데이터 복원
log_info "5단계: 백업 데이터 복원..."

# PostgreSQL 데이터 복원
if [ -f "$BACKUP_DIR/data/postgres-full-20250802_165334.sql" ]; then
    cat "$BACKUP_DIR/data/postgres-full-20250802_165334.sql" | docker exec -i automation-postgres psql -U postgres -d automation 2>/dev/null
else
    log_warning "PostgreSQL 백업 파일을 찾을 수 없습니다. 스킵..."
fi

# MongoDB 데이터 복원
if [ -f "$BACKUP_DIR/data/mongodb-20250802_165334.archive" ]; then
    docker exec -i automation-mongodb mongorestore --archive --db=automation \
        --username=admin --password=automation_mongo_pass_2024 \
        --authenticationDatabase=admin --drop < "$BACKUP_DIR/data/mongodb-20250802_165334.archive" 2>/dev/null
else
    log_warning "MongoDB 백업 파일을 찾을 수 없습니다. 스킵..."
fi

log_success "데이터 복원 완료"
echo ""

# 6. Prisma 스키마와 DB 스키마 동기화 (핵심!)
log_info "6단계: Prisma-DB 스키마 동기화..."

# 누락된 컬럼 추가 (Prisma 스키마 기준)
docker exec automation-postgres psql -U postgres -d automation << 'EOF'
-- devices 테이블 수정
ALTER TABLE devices ADD COLUMN IF NOT EXISTS connection_info jsonb DEFAULT '{}'::jsonb;

-- mcp_servers 테이블 수정
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS transport VARCHAR(20) DEFAULT 'stdio';
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS connection_status VARCHAR(20) DEFAULT 'disconnected';
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS command VARCHAR(500);
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS args TEXT[] DEFAULT ARRAY[]::TEXT[];
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS ssh_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS docker_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS http_config JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS server_info JSONB;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS last_error TEXT;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS environment JSONB DEFAULT '{}'::jsonb;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS last_connected_at TIMESTAMP(6);
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS error_message TEXT;
ALTER TABLE mcp_servers ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;

-- mcp_tools 테이블 생성 (없는 경우)
CREATE TABLE IF NOT EXISTS mcp_tools (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    server_id UUID NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    input_schema jsonb DEFAULT '{}'::jsonb,
    output_schema jsonb DEFAULT '{}'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    is_enabled BOOLEAN DEFAULT true,
    created_at TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(server_id, name)
);

-- mcp_executions 테이블 생성 (없는 경우)
CREATE TABLE IF NOT EXISTS mcp_executions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    server_id UUID NOT NULL REFERENCES mcp_servers(id) ON DELETE CASCADE,
    tool_name VARCHAR(100) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    input_params jsonb DEFAULT '{}'::jsonb,
    output_result jsonb,
    error_message TEXT,
    started_at TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP(6),
    duration_ms INTEGER,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_by UUID,
    created_at TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP
);
EOF

log_success "스키마 동기화 완료"
echo ""

# 7. 모든 서비스 시작
log_info "7단계: 전체 서비스 시작..."
cd "$PROJECT_DIR"

# Kafka/Zookeeper 시작
docker-compose up -d zookeeper kafka
sleep 10

# Core 서비스 시작
docker-compose up -d storage gateway
sleep 5

# Domain 서비스 시작
docker-compose up -d device-service mcp-service llm-service workflow-engine
sleep 5

# Frontend 시작
docker-compose up -d main-app

log_success "모든 서비스 시작 완료"
echo ""

# 8. 서비스 상태 확인
log_info "8단계: 서비스 상태 확인..."
sleep 10

echo ""
echo "========================================="
echo "   서비스 상태"
echo "========================================="
docker ps --format "table {{.Names}}\t{{.Status}}" | grep automation | head -15
echo "========================================="
echo ""

# 9. API 테스트
log_info "9단계: API 동작 확인..."

# 로그인 테스트
TOKEN=$(curl -s -X POST http://localhost:8080/api/v1/auth/login \
    -H "Content-Type: application/json" \
    -d '{"username": "admin", "password": "Admin123!@#"}' | jq -r '.accessToken' 2>/dev/null)

if [ ! -z "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
    log_success "API Gateway: 정상 작동 ✅"
    
    # Device API 테스트
    DEVICES=$(curl -s -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/v1/devices | jq '.total' 2>/dev/null)
    if [ ! -z "$DEVICES" ] && [ "$DEVICES" != "null" ]; then
        log_success "Device API: 정상 작동 ✅ (장비: $DEVICES개)"
    else
        log_warning "Device API: 확인 필요"
    fi
    
    # MCP API 테스트
    MCP_SERVERS=$(curl -s -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/v1/mcp/servers | jq '.total' 2>/dev/null)
    if [ ! -z "$MCP_SERVERS" ] && [ "$MCP_SERVERS" != "null" ]; then
        log_success "MCP API: 정상 작동 ✅ (서버: $MCP_SERVERS개)"
    else
        log_warning "MCP API: 확인 필요"
    fi
else
    log_warning "API Gateway 연결 대기 중..."
fi

echo ""
echo "========================================="
echo "   ✅ 복원 완료!"
echo "========================================="
echo ""
echo "📌 접속 정보:"
echo "  • Frontend: http://localhost:3001"
echo "  • API Gateway: http://localhost:8080"
echo "  • 계정: admin / Admin123!@#"
echo ""
echo "📊 복원된 데이터:"
echo "  • 장비: ${DEVICES:-확인중}개"
echo "  • MCP 서버: ${MCP_SERVERS:-확인중}개"
echo ""
echo "========================================="
echo ""

# 10. 추가 권장사항
if [ "$DEVICES" == "null" ] || [ "$MCP_SERVERS" == "null" ]; then
    echo "⚠️  일부 서비스가 아직 준비 중입니다."
    echo "   1-2분 후 브라우저에서 확인해주세요."
    echo ""
fi

log_success "시스템 복원이 완료되었습니다! 🎉"
